//*CLASE NIVELACION - REPASO DE METODOS
//for, forEach, map, find, filter, some, reduce, mucho repaso de eso
//var - let - const

let a = 1
a = 2
//abajo sale error, no se puede reasignar otra variable a const. 
const b = 1
b = 2 
b = {
    x : 1
} // a la x dentro de b si se le puede reasignar el valor. 

//* NOTACI√ìN DE PUNTO/CORCHETE
b.x = 2 // asi se cambia el valor 
b["x"]

if(true){
    var c = 1
    let d = 1 
    const e = 1

    console.log({c})
    console.log({d})
    console.log({e})
}

console.log({c}) // esta no respeta el scope se muestra en consola, var es el admin de las variables.
console.log({d}) //no se muestra por scope.
console.log({e}) //no se muestra por scope.

//* ü§Ø var es la a del script del window.  osea var es lo mismo que window.a
window //es el objeto que engloba TODO JS. Todo lo que hagas estara contenido en window. 
// osea originalmente seria window.console.log("hola mundo") o window.document.querySelector("body")




////////////////////////////////////////
//* Clase 1 - 

/* 
TOTALMENTE APARTE: 
    para crear apps luego: https://www.electronjs.org/


COMANDOS TERMINAL: 
    pwd - directorio global 
    sudo - super user do, autentiÃÅquese como superusuario para obtener privilegios de seguridad adicionales
    ls: enumera el contenido de un directorio en particular
    cd: cambia a otro directorio (como en DOS)
    say Hello World!



DESCARGAR LOS NODE MODULES: 
    https://nodejs.org/es/
    Descargas 16.06 - ya lo tienes instalado

    luego: https://create-react-app.dev/ por si quiers leer como

    ------------------------------------------------------
    
    NPM INSTALL : npm install nombre-paquete
    
    instalaciones LOCALES: Instala / Descarga un paquete en el directorio local.
        Ej: npm i create-react-app (el app es el nombre que le das lo puedes cambiar)

    instalaciones GLOBALES: Instala / Descarfa un paquete en el SO (Sistema operativo)
        Ej: npm i -g create-react-app

EXPLICANDO LAS CARPETAS DE LAS node_modules: 
    //* SOLO IMPORTA INDEX.JS, puedes borrar todo lo demas
    y dejas en ese archivo solo: 
            import React from 'react'; 
            //es como crear: let react = import ./carperta llamada de algun lugar en toda mi carpeta que se llame react. 

            import ReactDOM from 'react-dom/client';
            import App from './App'; //carga la app que hice

            const root = ReactDOM.createRoot(document.getElementById('root'));
            // va pintar todo en el root del index.html de la carpeta public.
            root.render(<App />) //lo muestra en el render
            ;

    src - la mas importante, esto es lo que muestra el atomo moviendose.
    public - iconos, imagenes (si es una pagina chiqui en grandes irian en src, en src pueden ser dinamicas, en public no podes cambiar).
    .gitignore - te permite ignorar cosas de git. 
    package.lockjson - se crea en la instalacion, NO SE TOCA, NO SE PUEDE VOLVER ATRAS. SE DA√ëA. NO LO MIRES.
    package.json - archivo de configuracion, 
        Deependencies - te muestra lo que tienes intalada. Aunque en node_modules salgan muchoas cosas.
        Scripts - nuevas lineas de comando para la terminal ej react-scripts start. 

    Mas info de como incorporar cosa - https://create-react-app.dev/docs/adding-images-fonts-and-files/ aca sobre como incorporar fotos, fonts, etc

    */

//////////////////
//* Clase 2 - JSX & transpilling 

/* Empezas la app as√≠ : 
vas a:
    1. La terminal.
    2. Pones: cd (lugar de carpeta donde guardaste el node_modules)
    3. luego: npm start 
    (te debe abrir la app en el navegador, sino es porque probablemebte no estas en la carpeta que tiene los node_modules)
*/ 


//NOTAS UTILES.
//* NADA DE COMENTARIOS - TODO EN README.md - formas de escribir https://www.markdownguide.org/cheat-sheet/
// para programar en vs code sino tienes online- https://stackblitz.com/edit/react-2n967x?file=src%2FApp.js

/* 
////////////////////


//*     TRABAJANDO EN LA CARPETA:
//*     - archivo: INDEX.JS 
            import React from 'react'; 
            //es como crear: let react = import ./carperta llamada de algun lugar en toda mi carpeta que se llame react. 

            import ReactDOM from 'react-dom/client';
            import App from './components/app'; //carga la app que hice
            import './components/estilos.css'; //carga el css 

            const root = ReactDOM.createRoot(document.getElementById('root'));
            // va pintar todo en el root del index.html de la carpeta public.
            root.render(<App />) //lo muestra en el render
            ;

////////////////////

//* COMPONENTES - creas carpeta: components y metes las de abajo
Componente son funciones, SIEMPRE EN MAYUSCULAS, siempre tiene return, solo 1 return por compomente.

//*    -archivo: APP.JS
            function App(){ //Componente son funciones, SIEMPRE EN MAYUSCULAS, siempre tiene return, solo 1 return por compomente.
                return (
                    //OBLIGATORIO poner <fragment><fragment/> o vacia <></> se llena solo
                    //class no sirve pasa a className, de resto tdo si pero en camel case si son dos palabras. 
                    <> 
                    <Header/> //asi se importa el archivo componente header. 
                    <header id="header">
                        <h1 className="titulo">Titulo</h1>
                        <nav>
                            <a href="#">link</a>
                            <a href="#">link</a>
                        </nav>
                    </header>
                    </>
                )
            }


export default App; //SIEMPRE debes poner export. para importar algo debe esar previamente exportado.

////////////////////

//*    -archivo: header.js 
            function Header(){ 
                return (
                    <header id="header">
                        <h1 className="titulo">Titulo</h1>
                        <nav>
                            <a href="#">link</a>
                            <a href="#">link</a>
                        </nav>
                    </header>
                )
            }

export default Header; //SIEMPRE debes poner export. para importar algo debe esar previamente exportado.

*/


//////////////////
/* Clase 3 - 

UN COMPONENTE es qu√©? 
1. Una funci√≥n reuzable.
2. Empieza con mayusuculas.
3. Debe tener un return y export. 
4. ponle como figma, header todos tienen lo mismo. Atomic design, components en figma. */

//ESTRUCTURA USUAL DE COMPONENTE: 
// Baja la extension: ES7 + REACT JS SNIPPETS - https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets

//escribes (rafce) y te autocompleta la estructura normal de componente de react (como cuando escribes ! en html)
import React from 'react' // desde la nueva actualizacion no se necestia esta linea.

const Nav = () => {
    return (
        <div>Nav</div>
    )
}

export default Nav

// 

/* OTRAS LIBRERIAS APARTE DE BOOTSTRAP: 
1. bootstrap
2. https://chakra-ui.com/ - Yo recomiendo Chakra UI es bastante intuitivo 
https://bulma.io/
3. tailwind
4. yo use: MATERIAL UI tmb, es un cachito mas dificil que bootstrap creo pero se ve lindo
*/


/* como traer BOOTSTRAP? 
https://react-bootstrap.github.io/getting-started/introduction
https://reactstrap.github.io/?path=/story/home-installation--page

1. En terminal en tu proyecto: npm install react-bootstrap bootstrap

2. En tu index.js: import 'bootstrap/dist/css/bootstrap.min.css'; //esto carga bootstrap

3. luego en tus archivos pones: import {Button} from "react-bootstrap" // 


tipos de componenetes: 
- Estructurales o layout: App , Header, Footer. 

__________________________
funciones (En react son los componentes)


PROPS (en react son los paramentos) - SOn los parametros de los componentes. 
    
en props: 
    para no pasar strings: 
    <Footer test={true}/> // asi sale booleans. asi no salen strings. 
    <Footer test="true"/> // asi sale strings.
*/

///////////////////////////////////////

//clase 3 
/* 
1. Seleccionar el boton
2. se agrega un click al boton. 
3. aumentar la variable contador. 
4. seleccionar los dos textos.
5. texto.innerText = ""

ESTADO: Son variables que se crean adentro de un componente y sirven para guardar ingormacion qu
que sil a modificamos se van a ver reflejada en el componente automaticamente. 

HOOK: son funciones. NO SE LLAMAN EN CONDICIONALES. 

useState: Variable que guarda info y si la moificas modifica todo lo que usaba el componenete. te mandan estados nuevos y un metodo para modificarlo y siempre da un array como resultado. 

contador++ (SI AUMENTA Y SI CAMBIA EL CONTADOR)
(o sea que el ++ modifica y guarda el valor a la variable)
contador + 1 MAL NO MODIFICA LA VARIABLE. 

*/



/* Clase events:
//* EVENTOS
Tddas las funciones returnan undefined si no tienen return.


Adentro no puede estar una funcion ejecutada {handleClick()} porque se ejecutara antes del on Click.

const handleClick = () => {
        console.log("Click")
    }

    ESTO ESTA MAL üëá

    <button onClick={handleClick()}> // ACA VA EL RESULTADO DE LA FUNCION ERROR



    ESTO ESTA BIEN üëá

    <button onClick={handleClick}>  // ACA VA LA FUNCION SIN RESULTADO PARA QUE SE EJECUTE
    
    

    ESTO ESTA BIEN pero esta raro, no lo usesüëá Si no puedes pasarle un parametro a otroa funcion lo puedes meter dento de otra funcion como abajo
    const handleClick = () => {
        console.log("Click")

        return () => {
            console.log("Segundo")
        }
    }
    
    <button onClick={handleClick()}> // aqui si se ejecutara esto, pero se ejcuta la segunda no la primera.
    



//* CUANDO ESCRIBES e COMO CONSOLE LOG TE SALE TODA LA INFO DETALALDA IMPORTANTE DEL EVENTO
//* SUPER UTILLLLLL

    const Carrito = () => {

    const handleClick = (e) => {
        console.log(e)
    }

    const handleChange= (e) => {
        console.log(e)
    }

    <input type="text" onChange={handleChange}/>
    <button onClick={handleClick}> click </button>

    
//* TE AYUDA POR EJEMPLO CON:
    event.preventDefault()
    event.stopPropagation() // Detiene la propagacion del evento. 
    event.target() //te dice que disparo el evento.


//*  event.preventDefault()



//* event.target() 
    aca saldria:     <button onClick={handl Click}> click </button>
    osea el evento salio de un boton. 
    puedes estar mas seguro poniendo  event.currenttarget() 

//*   e.stopPropagation() 
    // con esto evitas que se dispare 
    handleClickDiv y handleClick solo se dispara handleClick
    Recuerda que primero se dispara el elemento y luego los de arriba, incluso hasta el elemento raiz (html).
    Hay dos tipos: Bubbling y Capturing. 


    const Carrito = () => {

    const handleClick = (e) => {
        e.stopPropagation()
        console.log("Click en el boton")
        console.log(e)
    }

    const handleClickDiv = (e) => {
        console.log("Click Div")
        console.log (e.currentTarget)
    }

    const handleChange= (e) => {
        console.log(e.target)
    }
    
//* PROPAGACION DE EVENTOS: 
    Primero se dispara el evento del elemento y luego puede seguir disparando los eventos que estan ENCIMA DE EL entonces para evitar
    eso usas: event.stopPropagation()
    
    
    
    
    
//* STATE UPLIFITING: 
//* PASAR PROPS DE COMPONENTES HIJOS A COMPNENTES PADRES.

    Puedes modoficiar un componnete padre desde un componente hijo
    PERO DEBES: 

    1. El componente padre debe tener un estado propio useState para sincronizar a los hijos. 
    2. El componente padre de ebe tener un componente call back:
        () => {} debe haber una funcion o metodo adentro.
    3. Esa funcion debes pasarla a todos los chiquis. 
    4. Recibis esa funcion y ya. 
    5. El chiqui DEBE pasar al padre a traes de una funcion. 

    
    
    
    
    //* createContext():
    conserva la info de estado global de cada componente.
    
    1) const contexto = createContext(); //Aca va a "vivir" la data global.
    2) const { Provider }  = contexto; //Es un componente que nos sirve para hacer "global" el valor del contexto desde su aparicion

    1) componente padre tiene un callback (itemDetail)
    2) componente padre le pasa el callback a los componentes hijos
    3) componente hijos llaman al callback en el evento

    1) en APP: 
    <BrowserRouter>
            <CustomProvider>
                    <Header />
                    <Main />
                    <Footer /> 
            </CustomProvider>  
        </BrowserRouter>       


    2) creas una funcion con los valores dentro de un rafce componente: 

    export const contexto = createContext(); //Aca va a "vivir" la data "global"
    const { Provider } = contexto; //Es un componente que nos sirve para hacer "global" el valor del contexto desde su aparicion 

    const CustomProvider = () => {

        const valorDelContexto = {
                cantidad: cantidad,
                carrito : carrito,
                agregarProducto,
                eliminarProducto,
        }

        return(
                <Provider value={valorDelContexto}>
                    {props.children}
                </Provider>
            )
        }
        export default CustomProvider;


    3) + pasas el valor como prop y tiene que ser children OJO. 
    return(
        <Provider value={valorDelContexto}>
            {props.children}
        </Provider>
    )
}
    en el componente donde quieres exportar: 
    4) import { useContext } from "react"; // en el componente donde quieres usar el contexto
    5) import { contexto } from './CustomProvider';
    6) Declaras useContext funcion como const: 

    const { agregarProducto } = useContext(contexto)

    7) metes el "agregarProducto" dentro de una funcion ya establecida en el componente y listo. 

    const onAdd = (contador) => {
        // console.log("producto a comprar :")
        // console.log(item)
        // console.log("Cantidad a comprar: ")
        console.log(parseInt(contador))
        setIsAdded(true)
        item.cantidad = contador
        agregarProducto(item)
    }



    //*CLASE : Tecnicas de rendering

    //* Forma de escribirlo con menos lineas: useHook()
    
    Ahora cambias en vez de escribir en el componente padre: 

        export const contexto = createContext(); //Aca va a "vivir" la data "global"
        const { Provider } = contexto; //Es un componente que nos sirve para hacer "global" el valor del contexto desde su aparicion 


    Escribes en el componente padre: 

        const contexto = createContext(); //Aca va a "vivir" la data "global"
        const { Provider } = contexto; //Es un componente que nos sirve para hacer "global" el valor del contexto desde su aparicion 

        export const useCarrito = () => {
            return useContext(contexto)
        }

    y en el componente hijo, donde exportas, a no escribes:

        import { useContext } from "react"; // en el componente donde quieres usar el contexto
        import { contexto } from './CustomProvider';

    y 
        const { agregarProducto } = useContext(contexto)


    sino que escribes üëá

        import { useCarrito } from './CustomProvider';

    y 
            const { agregarProducto } = useCarrito()



    //* COMO REDUCIR TU CODIGO CON LOS TERNARIOS: 

    TU CODIGO INICIAL: 
                const BarraNav = ({ type,count }) => {

                if(type === "header"){
                    return (
                        <nav>
                        <Navbar fixed="top" bg="dark" variant="dark" >
                            <Link to="/">
                                <img
                                    alt="logo"
                                    src="./amazon.png"
                                    style={{
                                    height: 40,
                                    width: 140
                                    }}
                                />     
                            </Link>

                            <Container className="justify-content-end">
                                <Link className="sneakersNav" to ="/category/tenis">Sneakers</Link>
                                <Link className="electronicsNav" to ="/category/electronics">Electronics</Link>
                                <Link className="apparelNav" to ="/category/apparel">Apparel</Link>
                                <Link className="sandalsNav" to ="/category/sandals">Sandals</Link>
                                <CartWidget/>
                                <Link className="perfilNav" to ="/perfil/">Perfil</Link>
                            </Container>
                        </Navbar> 
                        </nav>
                    )
                } else {
                    return (
                        <nav>
                        <Navbar  fixed="bottom" bg="dark" variant="dark"  className="BarraNav">
                            <Container className="justify-content-end">
                                <Link className="perfilNav" to ="/perfil/">Perfil</Link>
                            </Container>
                        </Navbar>
                        </nav>
                    )
                }
            }

            export default BarraNav


    */
